AWSTemplateFormatVersion: "2010-09-09"

Description: createRDS

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: ""

  InstanceHostName:
    Type: String
    Default: "cfn-instance"

  SSHAllowIPAddress:
    Description: "Check IPv4 : https://whatismyipaddress.com/ja/index"
    Type: String
    AllowedPattern: (^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$)
    Default: "0.0.0.0"

  RDSPortNumber:
    Description: "MySQL : 3306 , PostgreSQL : 5432"
    Type: Number
    Default: 3306
    AllowedValues: [3306, 5432]

  DBEngine:
    Description: Select DBEngine.
    Type: String
    Default: mysql
    AllowedValues: [mysql, postgres]

  DBVersion:
    Type: String
    Default: ""

  DBParameterGroup:
    Description: "Insert RDS ParameterGroup Name : https://ap-northeast-1.console.aws.amazon.com/rds/home?region=ap-northeast-1#option-groups-list:"
    Type: String
    Default: "default"

  DBOptionGroup:
    Description: "Insert RDS OptionGroup Name : https://ap-northeast-1.console.aws.amazon.com/rds/home?region=ap-northeast-1#option-groups-list:"
    Type: String
    Default: "default"

  DBPassword:
    Description: "Insert SSM Parameter Store Name : https://ap-northeast-1.console.aws.amazon.com/systems-manager/parameters/?region=ap-northeast-1&tab=Table"
    Type: String
    Default: ""

Conditions:
  MySQL: !Equals [!Ref DBEngine, mysql]
  PostgreSQL: !Equals [!Ref DBEngine, postgres]
  ParameterGroup: !Equals [!Ref DBParameterGroup, default]
  OptionGroup: !Equals [!Ref DBOptionGroup, default]

Resources:
  # ------------------------------------------------------------#
  #  VPC
  # ------------------------------------------------------------#
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: cfn-vpc

  ##### IGW #####
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: cfn-igw

  ##### IGW Attach #####
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ##### PublicSubnet #####
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: cfn-public-subnet

  ##### PubSub RouteTable #####
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cfn-public-routetable

  ##### Routing #####
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ##### PubSub RT Attach #####
  PubSubRTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  ##### PrivateSubnet 1a #####
  PrivateSubnet1a:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1a
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: cfn-private-subnet-1a

  ##### PrivateSubnet 1c #####
  PrivateSubnet1c:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-northeast-1c
      VpcId: !Ref VPC
      CidrBlock: 10.0.21.0/24
      Tags:
        - Key: Name
          Value: cfn-private-subnet-1c

  ##### PvtSub RouteTable #####
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: cfn-private-routetable

  ##### PvtSub RT Attach 1a #####
  PvtSubRTattach01:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1a
      RouteTableId: !Ref PrivateRouteTable

  ##### PvtSub RT Attach 1c #####
  PvtSubRTattach02:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1c
      RouteTableId: !Ref PrivateRouteTable

  # ------------------------------------------------------------#
  #  EC2Instance
  # ------------------------------------------------------------#
  ##### MySQL #####
  EC2InstanceMysql:
    Type: AWS::EC2::Instance
    Condition: MySQL
    Properties:
      ImageId: ami-030cf0a1edb8636ab # AmazonLinux2
      KeyName: !Ref KeyPairName
      InstanceType: t2.micro
      InstanceInitiatedShutdownBehavior: stop
      Tenancy: default
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            DeleteOnTermination: true
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          hostnamectl set-hostname ${InstanceHostName}
          timedatectl set-timezone Asia/Tokyo
          echo PS1=\"[\\u@\\h \\t \\W]\\$ \" >> /root/.bashrc
          echo PS1=\"[\\u@\\h \\t \\W]\\$ \" >> /home/ec2-user/.bashrc
          yum update -y
          yum install mysql -y
      Tags:
        - Key: Name
          Value: RDSUpdateTest-MySQL

  ##### PostgreSQL #####
  EC2InstancePostgresql:
    Type: AWS::EC2::Instance
    Condition: PostgreSQL
    Properties:
      ImageId: ami-030cf0a1edb8636ab # AmazonLinux2
      KeyName: !Ref KeyPairName
      InstanceType: t2.micro
      InstanceInitiatedShutdownBehavior: stop
      Tenancy: default
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet
          GroupSet:
            - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            DeleteOnTermination: true
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            hostnamectl set-hostname ${InstanceHostName}
            timedatectl set-timezone Asia/Tokyo
            echo PS1=\"[\\u@\\h \\t \\W]\\$ \" >> /root/.bashrc
            echo PS1=\"[\\u@\\h \\t \\W]\\$ \" >> /home/ec2-user/.bashrc
            wget https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
            rpm -Uvh --nodeps pgdg-redhat-repo-latest.noarch.rpm
            sed --in-place -e "s/\$releasever/7/g" /etc/yum.repos.d/pgdg-redhat-all.repo
            yum update -y
            yum install postgresql${Version} -y
          - { Version: !Select [0, !Split [".", !Ref DBVersion]] }
      Tags:
        - Key: Name
          Value: RDSUpdateTest-PostgreSQL

  ##### SecurityGroup #####
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: cfn-sg
      GroupDescription: CloudFormation-SecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Sub ${SSHAllowIPAddress}/32
          FromPort: "22"
          ToPort: "22"
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: "80"
          ToPort: "80"

  ##### Elastic IP #####
  ElasticIPMysql:
    Type: AWS::EC2::EIP
    Condition: MySQL
    Properties:
      InstanceId: !Ref EC2InstanceMysql

  ElasticIPPostgresql:
    Type: AWS::EC2::EIP
    Condition: PostgreSQL
    Properties:
      InstanceId: !Ref EC2InstancePostgresql

  # ------------------------------------------------------------#
  #  RDSInstance
  # ------------------------------------------------------------#
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: RDS-update-test
      DBName: RDSupdate
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DBParameterGroupName: !If
        - ParameterGroup
        - !If 
          - MySQL
          - !Sub
            - "default.${DBEngine}${MajorVersion}.${MinorVersion}"
            - { MajorVersion: !Select [0, !Split [".", !Ref DBVersion]], MinorVersion: !Select [1, !Split [".", !Ref DBVersion]] }
          - !Sub
            - "default.${DBEngine}${MajorVersion}"
            - { MajorVersion: !Select [0, !Split [".", !Ref DBVersion]] }
        - !Ref DBParameterGroup
      OptionGroupName: !If 
        - OptionGroup
        - !If 
          - MySQL
          - !Sub
            - "default:${DBEngine}-${MajorVersion}-${MinorVersion}"
            - { MajorVersion: !Select [0, !Split [".", !Ref DBVersion]], MinorVersion: !Select [1, !Split [".", !Ref DBVersion]] }
          - !Sub
            - "default:${DBEngine}-${MajorVersion}"
            - { MajorVersion: !Select [0, !Split [".", !Ref DBVersion]] }
        - !Ref DBOptionGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBVersion
      MasterUsername: root
      MasterUserPassword: !Sub "{{resolve:ssm-secure:${DBPassword}:1}}"
      MultiAZ: false
      AvailabilityZone: !GetAtt PublicSubnet.AvailabilityZone
      PubliclyAccessible: false
      StorageEncrypted: false
    DeletionPolicy: Delete

  ##### SubnetGroup #####
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB SubnetGroup
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds:
        - !Ref PrivateSubnet1a
        - !Ref PrivateSubnet1c

  ##### SecurityGroup #####
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: rds-sg
      GroupDescription: RDS-SecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref EC2SecurityGroup
          FromPort: !Ref RDSPortNumber
          ToPort: !Ref RDSPortNumber
